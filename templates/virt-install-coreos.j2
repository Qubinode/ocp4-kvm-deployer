#!/bin/bash
##
# Still in development preview
##
set -xe
mac_address=$(sudo virsh net-dumpxml {{ libvirt_network_name }} |awk '/host mac/ {print $0}'| awk '/{{ vm_name }}/ {print $2}'|grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')

project_dir={{ project_dir }}
kernel={{ coreos_installer_kernel }}
initrd={{ coreos_installer_initramfs }}
kernel_file=${project_dir}/rhcos-install/${kernel}
initrd_file=${project_dir}/rhcos-install/${initrd}


args='nomodeset '
args+='coreos.inst=yes '
args+='console=tty0 console=ttyS0 '
args+='coreos.inst.install_dev=/dev/vda '
args+='rd.neednet=1 '
args+='coreos.inst.insecure '
args+='coreos.inst.ignition_url={{ rhcos_ignition }} '
args+='coreos.live.rootfs_url={{ coreos_rootfs_url }}  '
args+='ip={{ vm_ip }}::{{ ocp4_gateway_ip }}:{{ mask }}:{{ vm_name }}.{{ cluster_name }}.{{ ocp4_cluster_domain }}:ens3:none nameserver={{ dns_server_ip }} '
{% if ((use_external_bridge == true) and ( 'bootstrap' not in vm_name )) %}
args+='ip=ens4:dhcp '
{% endif %}

{% if performance_disk %}
qemu_mode=falloc
{% else %}
qemu_mode=metadata
{% endif %}

# {{ vm_type }} Node
sudo qemu-img create -f qcow2 -o preallocation=$qemu_mode {{ kvm_host_libvirt_dir }}/{{ vm_name }}-vda.qcow2 {{ hd_size }}
{% for item in extra_storage %}
{%- if item.enable %}
sudo qemu-img create -f qcow2 -o preallocation=$qemu_mode {{ kvm_host_libvirt_dir }}/{{ vm_name }}-{{ item.name }}.qcow2 {{ item.size }}
{% endif %}
{% endfor %}

sudo virt-install \
  --name {{ vm_name }} \
  --disk {{ kvm_host_libvirt_dir }}/{{ vm_name }}-vda.qcow2,bus=virtio,format=qcow2 \
  {% for item in extra_storage %}
  {%- if item.enable %}
    --disk {{ kvm_host_libvirt_dir }}/{{ vm_name }}-{{ item.name }}.qcow2,bus=virtio,format=qcow2 \
  {% endif %}
  {% endfor %}
    --memory {{ memory_size }} \
  --vcpus {{ cpu_size }} \
  --os-variant {{ os_variant }} \
  --rng /dev/urandom \
  --network network={{ libvirt_network_name }},model=virtio,mac=${mac_address} --noreboot --noautoconsole \
  {% if ((use_external_bridge == true) and ( 'bootstrap' not in vm_name )) %}
  --network network={{ external_bridge_network }},model=virtio --noreboot --noautoconsole \
  {% endif %}
  --install kernel=${kernel_file},initrd=${initrd_file},kernel_args_overwrite=yes,kernel_args="${args}"
