#!/bin/bash

COUNT=0
SLEEP_FOR=0
TIMEOUT=60

if oc get nodes | grep okd
then
    install_dir=okd4
    product=okd4
else
    install_dir=ocp4
    product=ocp4
fi

KUBEADMIN_PASS=$(cat {{ project_dir }}/${install_dir}/auth/kubeadmin-password)
TOTAL_OPERATORS=$(/usr/local/bin/oc get clusteroperators --no-headers=true | awk '{print $1}' | wc -l)
OPERATORS=$(/usr/local/bin/oc get clusteroperators --no-headers=true | awk '{print $1}')
sp="/-\|"
sc=0
COLOR_RED=`tput setaf 1`
COLOR_GREEN=`tput setaf 2`
COLOR_RESET=`tput sgr0`

{% raw %}
spin() {
   printf "\b${sp:sc++:1}"
   ((sc==${#sp})) && sc=0
}

endspin() {
   printf "\r%s\n" "$@"
}
{% endraw %}

printf "%s\n" "    Ensure all Cluster operators are available!"
if [ -z  $KUBEADMIN_PASS ];
then
  echo "OpenShift Cluster is not installed on machine"
  echo "Please run ./qubinode-installer -p ${product}"
  exit 0
fi

until [[ $COUNT -eq $TOTAL_OPERATORS || $SLEEP_FOR -eq $TIMEOUT ]]
do
    for operator in $(echo $OPERATORS)
    do
        STATUS=$(/usr/local/bin/oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}'|awk '/Available/ {print $2}'|grep -o True)
        if [ "A${STATUS}" == "ATrue" ]
        then
            COUNT=$(($COUNT + 1))
	else
            printf "%s\n" "    Waiting on $operator status to change from $STATUS to True"
        fi
    done
    if [ $COUNT -eq $TOTAL_OPERATORS ]
    then
        break
    else
        sleep $SLEEP_FOR
        let SLEEP_FOR=SLEEP_FOR+1
    fi
done

if [ $SLEEP_FOR -eq $TIMEOUT ]
then
    for operator in $(echo $OPERATORS)
    do
        STATUS=$(/usr/local/bin/oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}'|awk '/Available/ {print $2}')
        if [ "A${STATUS}" == "ATrue" ]
        then
            printf "%s\n" "*************************************"
            printf "%s\n" "${COLOR_RED}FAILLED OPERATOR${COLOR_RESET} ${COLOR_GREEN}$operator${COLOR_RESET} ${COLOR_RED}STATUS${COLOR_RESET}"
            /usr/local/bin/oc get clusteroperator $operator
            printf "%s\n" ""
            /usr/local/bin/oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}'
            printf "%s\n" "*************************************"
            printf "%s\n" ""
        fi
    done

    /usr/local/bin/oc get nodes
    printf "%s\n" ""
    printf "%s\n" "    ${COLOR_RED}Timeout waiting for all cluster operators to come up${COLOR_RESET}"
    printf "%s\n" ""
else
    printf "%s\n" "    ${COLOR_GREEN}All cluster operators are up${COLOR_RESET}"
    /usr/local/bin/oc get nodes -o wide --no-headers=true| awk 'BEGIN{printf("    %-3s%-40s%-16s%-8s%-7s\n","#","FQDN","External IP","ROLE","STATUS")}{printf("    %-3s%-40s%-16s%-8s%-7s\n",NR,$1,$6,$3,$2)}'
    printf "%s\n" ""
    printf "%s\n" ""
    printf "%s\n" "    ${COLOR_GREEN}Console: https://console-openshift-console.apps.{{ cluster_name }}.{{ ocp4_cluster_domain }}"${COLOR_RESET}
    printf "%s\n" "    ${COLOR_GREEN}Username: kubeadmin"${COLOR_RESET}
    printf "%s\n" "    ${COLOR_GREEN}Password: $KUBEADMIN_PASS"${COLOR_RESET}
    printf "%s\n" ""
fi

