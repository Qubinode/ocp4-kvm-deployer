---
- set_fact:
    master_nodes_count: 0
    compute_nodes_count: 0

- name: start the loadbancer systemd service {{ lb_name }}.service
  systemd:
    name: "{{ lb_name }}.service"
    enabled: yes
    state: started
  when: not container_running|bool
  tags: startup

- name: collect all services state
  service_facts:
  register: services_state
  tags: startup

- name: fail if the systemd service {{ lb_name }}.service is not running
  fail:
    msg: "Load balancer service {{ lb_name }}.service is not running!!! Please check, run: systemctl status {{ lb_name }}.service"
  when: services_state.ansible_facts.services[ lb_name  + '.service'].state != 'running'
  tags: startup

- name: list all libvirt vms
  virt:
    command: list_vms
  register: all_vms
  tags: [ deploy_nodes, rhcos, bootstrap, startup ]

- name: start ocp master nodes
  vars:
    vm_name: "master-{{ '%00x' |format(item) }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ range(0, master_count|int)|list }}"
  delay: 10
  when: vm_name in all_vms.list_vms
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: wait for master nodes to be available
  shell: >
    /usr/local/bin/oc get nodes -o wide --no-headers=true | grep master| grep Ready|wc -l
  ignore_errors: yes
  become: no
  register: master_nodes_count
  until: master_nodes_count.stdout|int == master_count|int
  retries: 18
  delay: 10
  changed_when: False
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: fail a total {{ master_count }} is not found
  fail:
    msg: "Was not able to confirm all {{ master_count }} master nodes are up"
  when: master_nodes_count.stdout|int != master_count|int
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: start ocp compute nodes
  vars:
    vm_name: "compute-{{ '%00x' |format(item) }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ range(0, compute_count|int)|list }}"
  delay: 10
  when: vm_name in all_vms.list_vms
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: wait for compute nodes to be available
  shell: >
    /usr/local/bin/oc get nodes -o wide --no-headers=true | grep worker| grep -v NotReady |grep Ready|wc -l
  ignore_errors: yes
  become: no
  register: compute_nodes_count
  until: compute_nodes_count.stdout|int == compute_count|int
  retries: 18
  delay: 10
  changed_when: False
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: fail a total {{ compute_count }} is not found
  fail:
    msg: "Was not able to confirm all {{ compute_count }} compute nodes are up"
  when: master_nodes_count.stdout|int != master_count|int
  tags: [ deploy_nodes, rhcos, bootstrap, startup]

- name: ensure compute nodes are set to schedulable
  vars:
    vm_name: "compute-{{ '%00x' |format(item) }}"
  shell: >
    /usr/local/bin/oc adm uncordon "{{ vm_name }}"
  register: schedule_state
  ignore_errors: yes
  loop: "{{ range(0, compute_count|int)|list }}"
  delay: 10
  when: vm_name in all_vms.list_vms
  tags: [ deploy_nodes, rhcos, bootstrap, startup]
