---
- name: fail when idm server ip address isn't provided
  fail: msg="Bailing out. this play requires 'idm_server_ipaddr'  your idm server ip"
  when: idm_server_ipaddr |length == 0
  tags: [idm, compute_dns, ctrlplane_dns, bootstrap_dns, api_dns, etcd_dns, wildcard_dns]

# NOTE: this may not be needed, uncomment if role fails
#- name: check DNS entries
#  include_tasks: check_dns_entries.yml
#  tags: [idm, compute_dns, ctrlplane_dns]
#

- name: Set IdM dns record state to either absent or present
  set_fact:
    record_state: "{{ 'absent' if dns_teardown|bool else 'present' }}"
  tags: always

- name: Add the bootstrap node to the IdM dns forward zone records list
  vars:
    ip: "{{ bootstrap_ip) }}"
    name: "{{ bootstrap_node_name }}"
    ptr: "{{ bootstrap_ptr }}"
  set_fact:
    records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  tags: [idm, dns, bootstrap_dns]

- name: Add the bootstrap node to the IdM dns reverse forward zone records list
  vars:
    ip: "{{ bootstrap_ip }}"
    name: "{{ bootstrap_node_name }}"
    ptr: "{{ bootstrap_ptr }}"
  set_fact:
    reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  tags: [idm, dns, bootstrap_dns]

- name: Add the api-int ip to the IdM dns forward zone records list
  vars:
    ip: "{{ api_int }}"
    name: api-int
    ptr: "{{ api_int_ptr }}"
  set_fact:
    records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  tags: [idm, dns, api_dns]

- name: Add the api ip to the IdM dns forward zone records list
  vars:
    ip: "{{ api_ip | default(api_ip) }}"
    name: api
    ptr: "{{ api_ip_ptr | default(api_ip_ptr) }}"
  set_fact:
    records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  tags: [idm, dns, api_dns]

- name: Add the control plane nodes A records to the IdM dns forward zone records list
  vars:
    ip: "{{ ocp4_gateway_ip.split('.')[:3] | join('.') }}.{{ ctrlplane_ip_octet|int + item|int }}"
    name: "{{ ctrl_plane_prefix }}{{ item }}"
    ptr: "{{ ctrlplane_ip_octet|int + item|int }}"
  set_fact:
    records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  with_sequence: start=0 end="{{ ctrlplane_count|int - 1 }}" stride=1
  tags: [idm, dns, ctrlplane_dns]

- name: Add the control plane nodes PTR records to the IdM dns reverse zone records list
  vars:
    ip: "{{ ocp4_nat_gateway.split('.')[:3] | join('.') }}.{{ ctrlplane_ip_octet|int + item|int }}"
    name: "{{ ctrl_plane_prefix }}{{ item }}"
    ptr: "{{ ctrlplane_ip_octet|int + item|int }}"
  set_fact:
    reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
  with_sequence: start=0 end="{{ ctrlplane_count|int - 1 }}" stride=1
  tags: [idm, dns, ctrlplane_dns]

- name: Generate worker nodes A and PTR records
  block:
    - name: Add worker nodes A records to the IdM forward zone records list
      vars:
        ip: "{{ ocp4_nat_gateway.split('.')[:3] | join('.') }}.{{ compute_ip_octet|int + item|int }}"
        name: "{{ worker_node_prefix }}{{ item }}"
        ptr: "{{ compute_ip_octet|int + item|int }}"
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ compute_node_count|int - 1 }}" stride=1
      tags: [idm, dns, compute_dns]
    
    - name: Add worker nodes PTR records to the IdM reverse zone records list
      vars:
        ip: "{{ ocp4_nat_gateway.split('.')[:3] | join('.') }}.{{ compute_ip_octet|int + item|int }}"
        name: "{{ worker_node_prefix }}{{ item }}"
        ptr: "{{ compute_ip_octet|int + item|int }}"
      set_fact:
        reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ compute_node_count|int - 1 }}" stride=1
      tags: [idm, dns, compute_dns]
  when: compute_count|int != 0

- name: Create the IdM forward dns zone {{ idm_dns_forward_zone }}
  ipa_dnszone:
    state: "{{ record_state }}"
    zone_name: "{{ idm_dns_forward_zone }}"
    validate_certs: no
  tags: [idm, compute_dns, ctrlplane_dns, bootstrap_dns, api_dns, etcd_dns, wildcard_dns]

- name: Create the IdM reverse dns zone {{ idm_dns_reverse_zone }}
  ipa_dnszone:
    state: "{{ record_state }}"
    zone_name: "{{ idm_dns_reverse_zone }}"
    validate_certs: no
  tags: [idm, compute_dns, ctrlplane_dns, bootstrap_dns, api_dns, etcd_dns, wildcard_dns]

- name: Ensure all defined A records are {{ record_state }}
  ipa_dnsrecord:
    zone_name: "{{ idm_dns_forward_zone }}"
    record_name: "{{ item.hostname }}.{{ cluster_name }}"
    record_type: A
    record_value: "{{ item.ipaddr }}"
    state: "{{ record_state }}"
    validate_certs: no
  loop: "{{ records }}"
  loop_control:
    label: "{{ item.hostname }}.{{ cluster_name }}"
  when: not dns_teardown|bool
  tags: [idm, api_dns, compute_dns, ctrlplane_dns, bootstrap_dns, api_dns, etcd_dns, dns]

- name: Ensure all defined PTR records are {{ record_state }}
  ipa_dnsrecord:
    zone_name: "{{ idm_dns_reverse_zone }}"
    record_name: "{{ item.ptr_record }}"
    record_type: PTR
    record_value: "{{ item.hostname }}.{{ cluster_name }}.{{ ocp4_cluster_domain }}."
    state: "{{ record_state }}"
    validate_certs: no
  with_items: "{{ reverse_records }}"
  when: not dns_teardown|bool
  tags: [idm, compute_dns, ctrlplane_dns, bootstrap_dns, api_dns, etcd_dns]

- name: Generate IdM Session Cookie
  vars:
  uri:
    url: "https://{{ idm_server_fqdn }}/ipa/session/login_password"
    validate_certs: no
    method: POST
    status_code: 200
    headers:
      Content-Type: "application/x-www-form-urlencoded"
      Accept: "text/plain"
      Referer: "https://{{ idm_server_fqdn }}/ipa"
    body: "user={{ user_idm_admin }}&password={{ user_idm_password }}"
  register: ipa_session
  run_once: true
  when: not dns_teardown|bool
  tags: [idm, dns, wildcard_dns, routes]

- name: Create IdM dns apps wildcard for applicaitons routes A record
  uri:
    url: "https://{{ idm_server_fqdn }}/ipa/session/json"
    validate_certs: no
    method: POST
    status_code: 200
    headers:
      Cookie: "{{ ipa_session.set_cookie }}"
      Accept: "application/json"
      Referer: "https://{{ idm_server_fqdn }}/ipa"
    body:
      method: dnsrecord_add
      params:
      - - "{{ idm_dns_forward_zone }}"
        - "{{ dns_wildcard }}"
      - a_part_ip_address: "{{ kvm_host_ip }}"
        a_extra_create_reverse: false
    body_format: json
  when: not dns_teardown|bool
  tags: [idm, dns, wildcard_dns, routes]
