---
- name: check if web directory
  stat:
    path: "{{ webserver_directory }}"
  register: webserver_dir
  tags: [ download, webserver ]

- name: Create a web directory
  file:
    path: "{{ webserver_directory }}"
    state: directory
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  register: create_webdir
  when: not webserver_dir.stat.exists
  tags: [ download, webserver ]

- name: check if {{ virtinstall_dir }} exist
  stat:
    path: "{{ virtinstall_dir }}"
  register: virtinstall_directory
  tags: [ download, virtinstall, deploy_nodes, webserver ]

- name: create directory {{ virtinstall_dir }}
  file:
    path: "{{ virtinstall_dir }}"
    state: directory
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  register: create_webdir
  when: not virtinstall_directory.stat.exists
  tags: [ download, virtinstall, deploy_nodes, webserver ]

- name: Create a {{ ocp4_dependencies_version }} directory
  file:
    path: "{{ webserver_dependencies }}"
    state: directory
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  tags: [ download, webserver ]

- name: Create a images directory
  file:
    path: "{{ webserver_images }}"
    state: directory
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  tags: [ download, webserver ]

- name: Create ignition directory
  file:
    path: "{{ dest_ignitions_web_directory }}"
    state: directory
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  tags: [ download, ignitions, webserver ]

- name: download the installer-initramfs.img metal-bios.raw.gz installer-kernel
  get_url:
    url: "{{ openshift_mirror }}/{{ item }}"
    dest: "{{ webserver_images }}/{{ item }}"
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  with_items:
    - "{{ coreos_installer_kernel }}"
    - "{{ coreos_installer_initramfs }}"
    - "{{ coreos_metal_bios }}"
  register: rhcos_dependencies_dl
  notify:
    - restart {{ podman_webserver }}.service
  tags: [ download, ignition, deploy_nodes, webserver ]

- name: copy {{ coreos_installer_kernel }} to {{ virtinstall_dir }}/vmlinuz
  copy:
    src: "{{ webserver_images }}/{{ coreos_installer_kernel }}"
    dest: "{{ virtinstall_dir }}/vmlinuz"
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  tags: [ download, virtinstall, deploy_nodes, webserver ]

- name: copy {{ coreos_installer_initramfs }} to {{ virtinstall_dir }}/initramfs.img
  copy:
    src: "{{ webserver_images }}/{{ coreos_installer_initramfs }}"
    dest: "{{ virtinstall_dir }}/initramfs.img"
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  tags: [ download, virtinstall, deploy_nodes, webserver ]

- name: get the status of the ignition files are available
  stat:
    path: "{{ ignition_files_dir }}/{{ item }}.ign"
  loop: "{{ nodes_types }}"
  register: rhcos_igition_files_exist
  tags: [ download, ignition, deploy_nodes, webserver ]

- name: check if ignition files exist
  fail:
    msg: One or more igition file does not exist! Please ensure the igition files have been created under {{ ignition_files_dir }}.
  with_items: "{{ rhcos_igition_files_exist.results }}"
  when: not item.stat.exists
  tags: [ download, ignition, deploy_nodes, webserver ]

- name: copy over ignition files to webserver pub directory
  copy:
    src: "{{ ignition_files_dir }}/{{ item }}.ign"
    dest: "{{ dest_ignitions_web_directory }}/{{ item }}.ign"
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
  loop: "{{ nodes_types }}"
  register: rhcos_igition_files_cp
  notify:
    - restart {{ podman_webserver }}.service
  tags: [ download, ignition, deploy_nodes, webserver ]

- name: Apply new SELinux file context to {{ webserver_directory }}
  sefcontext:
    target: '"{{ webserver_directory }}(/.*)?"'
    setype: container_file_t
    state: present
  when: rhcos_igition_files_cp.changed or rhcos_dependencies_dl.changed
  tags: [ download, ignition, deploy_nodes, webserver ]

- name: run restorecon on {{ webserver_directory }}
  command: restorecon -RFv {{ webserver_directory }}
  when: rhcos_igition_files_cp.changed or rhcos_dependencies_dl.changed
  tags: [ download, ignition, deploy_nodes, webserver ]
