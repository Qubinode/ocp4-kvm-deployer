---
- name: getting all ocp4 nodes
  command: oc get nodes -o custom-columns=NAME:.metadata.name --no-headers=true
  register: all_ocp_nodes
  ignore_errors: yes
  changed_when: False
  become: no
  tags: shutdown

- name: getting compute nodes
  command: kubectl get node --selector='!node-role.kubernetes.io/ctrlplane' -o custom-columns=NAME:.metadata.name --no-headers=true
  register: compute_ocp4_nodes
  ignore_errors: yes
  changed_when: False
  when: all_ocp_nodes and all_ocp_nodes.rc == 0
  become: no
  tags: shutdown

- name: getting control nodes
  command: kubectl get node --selector='!node-role.kubernetes.io/compute' -o custom-columns=NAME:.metadata.name --no-headers=true
  register: control_ocp4_nodes
  ignore_errors: yes
  when: all_ocp_nodes and all_ocp_nodes.rc == 0
  changed_when: False
  become: no
  tags: shutdown

- name: create/update ocp4 nodes ansible inventory
  template:
    src: ocp4-nodes-inventory.yml
    dest: "{{ project_dir }}/inventory/ocp4-nodes"
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
  when: all_ocp_nodes and all_ocp_nodes.rc == 0
  tags: shutdown

# eventually going to remove shutting down nodes with shutdown command
# and just rely an the virt module to shutdown the VM as it appears
# shutdown with the command module does not work as well as virt
- name: try to shutdown all nodes with the shutdown command
  when: all_ocp_nodes and all_ocp_nodes.rc == 0
  tags: shutdown
  block:

    - name: list all running libvirt vms
      virt:
        command: list_vms
        state: running
      register: running_vms
      become: yes

    - name: backup etcd on {{ control_ocp4_nodes.stdout_lines | first }}
      vars:
        node_name: "{{ control_ocp4_nodes.stdout_lines | first }}"
        vm_name: "{{ node_name.split('.')[0] | lower }}"
      command: /usr/local/bin/cluster-backup.sh /var/home/core/assets/backup
      register: backup_etcd
      delegate_to: "{{ node_name }}"
      ignore_unreachable: yes
      ignore_errors: yes
      when: vm_name in running_vms.list_vms and control_ocp4_nodes
      become: yes

    - name: shutdown compute nodes
      vars:
        vm_name: "{{ item.split('.')[0] | lower }}"
      command: /usr/local/bin/qubinode-shutdown-vm -i {{ homedir }}/.ssh/id_rsa -u {{ rhcos_user }} -n {{ item }}
      register: shutdown_computes
      ignore_errors: yes
      loop: "{{ compute_ocp4_nodes.stdout_lines }}"
      when: vm_name in running_vms.list_vms

    - name: wait for compute nodes to shutdown
      vars:
        vm_name: "{{ item.split('.')[0] | lower }}"
      include_tasks: wait_for_vm_shutdown.yml
      register: shutdown_vms
      loop: "{{ compute_ocp4_nodes.stdout_lines }}"
      loop_control:
        label: "{{ item.split('.')[0] | lower }}"
      when: shutdown_computes and shutdown_computes.changed

    - name: shutdown control nodes
      vars:
        vm_name: "{{ item.split('.')[0] | lower }}"
      command: /usr/local/bin/qubinode-shutdown-vm -i {{ homedir }}/.ssh/id_rsa -u {{ rhcos_user }} -n {{ item }}
      register: shutdown_control
      ignore_errors: yes
      loop: "{{ control_ocp4_nodes.stdout_lines }}"
      loop_control:
        label: "{{ item.split('.')[0] | lower }}"
      when: vm_name in running_vms.list_vms

    - name: wait for control nodes to shutdown
      vars:
        vm_name: "{{ item.split('.')[0] | lower }}"
      include_tasks: wait_for_vm_shutdown.yml
      register: shutdown_vms
      loop: "{{ control_ocp4_nodes.stdout_lines }}"
      loop_control:
        label: "{{ item.split('.')[0] | lower }}"
      when: shutdown_control and shutdown_control.changed

- name: list all running libvirt vms
  virt:
    command: list_vms
    state: running
  register: running_vms
  become: yes
  tags: shutdown

- name: ensure all ocp nodes are shutdown
  vars:
    vm_name: "{{ item.split('.')[0] | lower }}"
  virt:
    name: "{{ vm_name }}"
    state: shutdown
  register: all_nodes
  loop: "{{ groups['nodes'] }}"
  when: vm_name in running_vms.list_vms
  become: yes
  tags: shutdown

- name: wait for control nodes to shutdown
  vars:
    vm_name: "{{ item.split('.')[0] | lower }}"
  include_tasks: wait_for_vm_shutdown.yml
  register: shutdown_vms
  loop: "{{ control_ocp4_nodes.stdout_lines }}"
  loop_control:
    label: "{{ item.split('.')[0] | lower }}"
    #when: "'Failed' in shutdown_control"
  when: all_nodes and all_nodes.changed
  tags: shutdown
