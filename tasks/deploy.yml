---
- set_fact:
    ocp4_nodes: []

- name: check for user pull-secret
  stat:
    path: "{{ ocp4_pull_secret }}"
  register: pull_secret_file
  tags: [ setup ]

- name: fail if pull secret does
  fail:
    msg: "Please download your pull-secret from {{ pull_secret_request }} to {{ ocp4_pull_secret }}"
  when: not pull_secret_file.stat.exists
  tags: [ setup ]

- name: enable required firewall ports
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  loop: "{{ ocp4_firewall_ports }}"
  tags: [ setup ]

- name: import tasks install_podman.yml
  import_tasks: install_podman.yml

- name: import tasks ocp4_tools.yml
  import_tasks: ocp4_tools.yml

- name: import tasks create_ignitions.yml
  import_tasks: create_ignitions.yml

- name: import tasks deploy_libvirt_network.yml
  import_tasks: deploy_libvirt_network.yml

- name: deploy the podman container load balancer for OCP4
  import_role:
    name: openshift-4-loadbalancer
    tasks_from: create.yml
  vars:
    lb_name: "{{ ocp4_lb_container }}"
    lb_api: "{{ tmp_api | join(',') }}"
    lb_api_listen: "{{ tmp_api_listen | join(',') }}"
    lb_ingress_http: "{{ tmp_ingress_http | join(',') }}"
    lb_ingress_http_listen: "{{ tmp_ingress_http_listen | join(',') }}"
    lb_ingress_https: "{{ tmp_ingress_https | join(',') }}"
    lb_ingress_https_listen: "{{ tmp_ingress_https_listen | join(',') }}"
    lb_machine_config_server: "{{ tmp_machine_config_server | join(',') }}"
    lb_machine_config_server_listen: "{{ tmp_machine_config_server_listen | join(',') }}"
  when: (container_exist is defined and not container_exist|bool) and not tear_down|bool
  tags: [ lb, deploy_nodes ]

- name: deploy the podman container for hosting the required files for bootstrap
  import_role:
    name: ocp4-bootstrap-webserver
  tags: [ webserver, deploy_nodes ]

- name: import task download_rhcos_files.yml
  import_tasks: download_rhcos_files.yml

- name: Create the directory to store the virt-install scripts
  file:
    path: "{{ virtinstall_dir }}"
    state: directory
    owner: "{{ local_user_account }}"
  register: create_virtinstall_dir
  tags: [ deploy_nodes ]

- name: deploy a generated treeinfo that defines the location of the kernel and ramdisks
  template:
    src: treeinfo.j2
    dest: "{{ virtinstall_dir }}/.treeinfo"
    mode: "u=rw,g=r,o=r"
    owner: "{{ local_user_account }}"
  tags: [ deploy_nodes, rhcos ]

- name: import tasks configure_dns_entries.yml
  import_tasks: configure_dns_entries.yml
  tags: [ deploy_nodes, idm ]

- name: include build_cluster_nodes_profile.yml
  include_tasks: build_cluster_nodes_profile.yml
  loop: "{{ ocp4_instances }}"
  loop_control:
    loop_var: outer_item
    label: outer_item.name
  tags: [ deploy_nodes, rhcos, node_profile ]

- name: import tasks build_vm_list.yml
  import_tasks: build_vm_list.yml
  tags: [ deploy_nodes, rhcos, bootstrap ]

- name: deploy ocp4 nodes
  vars:
    vm_name: "{{ item }}"
  command: "{{ virtinstall_dir }}/{{ vm_name }}.sh"
  when: vm_name not in all_vms.list_vms
  loop: "{{ ocp4_nodes }}"
  delay: 10
  register: deploy_ocp4_nodes
  tags: [ deploy_nodes, rhcos ]

- name: include wait_for_vm_shutdown.yml
  include_tasks: wait_for_vm_shutdown.yml
  loop: "{{ ocp4_nodes }}"
  loop_control:
    loop_var: vm_name
    label: vm_name
  when: deploy_ocp4_nodes.changed
  tags: [ deploy_nodes, rhcos, rhcos_wait ]

- name: continue ocp4 bootstrap
  vars:
    vm_name: "{{ item }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ ocp4_nodes }}"
  delay: 10
  tags: [ deploy_nodes, bootstrap ]

- name: Waiting for bootstrap Complete
  shell: |
    /usr/local/bin/openshift-install  --dir "{{ openshift_install_dir }}"  wait-for bootstrap-complete --log-level debug 2>&1 | tee "{{ project_dir }}/ocp4/bootstrap-complete.log" &
  register: install_status
  until: "'Bootstrap status: complete' in install_status.stdout"
  retries: 120
  delay: 30
  tags: [ deploy_nodes, bootstrap, postinstall ]

- name: "Install Status"
  debug:
    msg: "{{ install_status }}"
  register: continue_install
  tags: [ deploy_nodes, bootstrap, postinstall ]


- name: list all libvirt vms
  virt:
    command: list_vms
  register: all_vms
  tags: [ deploy_nodes, rhcos, postinstall, bootstrap_shut ]

#- name: shutdown bootstrap nodes
#  vars:
#    vm_name: bootstrap
#  virt:
#    name: "{{ vm_name }}"
#    state: shutdown
#  register: shutdown_vms
#  when: vm_name in all_vms.list_vms and (continue_install.failed is defined and not continue_install.failed |bool) or vm_name in all_vms.list_vms
#  tags: [ deploy_nodes, rhcos, postinstall, bootstrap_shut ]
#
#- name: include wait_for_vm_shutdown.yml
#  vars:
#    vm_name: bootstrap
#  include_tasks: wait_for_vm_shutdown.yml
#  when: vm_name in all_vms.list_vms and (continue_install.failed is defined and not continue_install.failed |bool) or vm_name in all_vms.list_vms and (shutdown_vms.changed is defined and shutdown_vms.changed)
#  tags: [ deploy_nodes, rhcos, postinstall, bootstrap_shut]
#
#- name: destroy bootstrap node
#  vars:
#    vm_name: bootstrap
#  virt:
#    name: "{{ vm_name }}"
#    command: undefine
#  when: vm_name in all_vms.list_vms and (continue_install.failed is defined and not continue_install.failed |bool) or vm_name in all_vms.list_vms
#  tags: [ deploy_nodes, rhcos, postinstall, bootstrap_shut ]

#- name: Remove /tmp/bootstrap-complete.log
#  file:
#    path: "{{ project_dir }}/ocp4/bootstrap-complete.log"
#    state: absent
#  tags: [ deploy_nodes, bootstrap, postinstall ]

- name: ensure kube folder exist
  file:
    path: "/home/{{ local_user_account  }}/.kube/"
    state: directory
    mode: '0755'
  become: true
  become_user: "{{ local_user_account }}"
  tags: [ postinstall, enable_shutdown ]
  
- name: setup kubeconfig
  copy:
    src: "{{ project_dir }}/ocp4/auth/kubeconfig"
    dest: "/home/{{ local_user_account  }}/.kube/config"
  tags: [ postinstall, enable_shutdown ]

- name: Waiting for Installation to Complete
  shell: |
    /usr/local/bin/oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs /usr/localbin/oc adm certificate approve
    /usr/bin/timeout 10 /usr/local/bin/openshift-install --dir "{{ openshift_install_dir }}"  wait-for install-complete --log-level debug 2>&1 | tee -a /tmp/install-complete.log
  register: install_status
  until: "'Install complete!' in install_status.stdout"
  retries: 120
  delay: 30
  environment:
    KUBECONFIG: "{{ openshift_install_dir }}/auth/kubeconfig"
  tags: [ complete_install ]

- name: report on cluster status
  block:
    - name: "The OCP install has completed"
      debug:
        msg: "Install is compelte {{ install_status.stdout }}"
    - name: import check_cluster.yml
      import_tasks: check_cluster.yml
  when: "'Install complete!' in install_status.stdout"
  tags: [ complete_install ]
