---
# set up empty list that will be populated later
- set_fact:
    ocp4_nodes: []
    new_nodes: []
  tags: always

- name: import tasks configure_dns_entries.yml
  import_tasks: configure_dns_entries.yml
  tags: [ deploy_nodes, idm ]

- name: import tasks deploy_libvirt_network.yml
  import_tasks: deploy_libvirt_network.yml

- name: import tasks firewall_setup.yml
  import_tasks: firewall_setup.yml

- name: import tasks ocp4_tools.yml
  import_tasks: ocp4_tools.yml

- name: import tasks create_ignitions.yml
  import_tasks: create_ignitions.yml

- name: import task download_rhcos_files.yml
  import_tasks: download_rhcos_files.yml

- name: include tasks install_podman.yml
  include_tasks: install_podman.yml
  when: not podman_is_installed.stat.exists

- name: Create the directory to store the virt-install scripts
  file:
    path: "{{ virtinstall_dir }}"
    state: directory
    owner: "{{ local_user_account }}"
  register: create_virtinstall_dir
  tags: [ deploy_nodes ]

- name: deploy a generated treeinfo that defines the location of the kernel and ramdisks
  template:
    src: treeinfo.j2
    dest: "{{ virtinstall_dir }}/.treeinfo"
    mode: "u=rw,g=r,o=r"
    owner: "{{ local_user_account }}"
  tags: [ deploy_nodes, rhcos ]

- name: deploy the podman container load balancer for OCP4
  import_role:
    name: openshift-4-loadbalancer
    tasks_from: create.yml
  vars:
    lb_name: "{{ ocp4_lb_container }}"
    lb_api: "{{ tmp_api | join(',') }}"
    lb_api_listen: "{{ tmp_api_listen | join(',') }}"
    lb_ingress_http: "{{ tmp_ingress_http | join(',') }}"
    lb_ingress_http_listen: "{{ tmp_ingress_http_listen | join(',') }}"
    lb_ingress_https: "{{ tmp_ingress_https | join(',') }}"
    lb_ingress_https_listen: "{{ tmp_ingress_https_listen | join(',') }}"
    lb_machine_config_server: "{{ tmp_machine_config_server | join(',') }}"
    lb_machine_config_server_listen: "{{ tmp_machine_config_server_listen | join(',') }}"
  when: (container_exist is defined and not container_exist|bool) and not tear_down|bool
  tags: [ lb, deploy_nodes ]

- name: deploy the podman container for hosting the required files for bootstrap
  import_role:
    name: ocp4-bootstrap-webserver
  tags: [ webserver, deploy_nodes ]

- name: verify ignitions files are accessible
  include_tasks: check_webserver.yml
  tags: [ deploy_nodes, rhcos, rhcos_wait, add_computes ]

- name: import tasks from new_compute_ign.yml
  import_tasks: new_compute_ign.yml
  when: approve_work_csr|bool
  tags: [ deploy_nodes, rhcos, node_profile, add_computes ]

- name: include build_cluster_nodes_profile.yml
  include_tasks: build_cluster_nodes_profile.yml
  loop: "{{ ocp4_instances }}"
  loop_control:
    loop_var: outer_item
    label: outer_item.name
  tags: [ deploy_nodes, rhcos, node_profile, add_computes ]

- name: list all libvirt vms
  virt:
    command: list_vms
  register: all_vms
  tags: [ deploy_nodes, rhcos, bootstrap, add_workers ]

- name: deploy ocp4 nodes
  vars:
    vm_name: "{{ item }}"
  command: "{{ virtinstall_dir }}{{ vm_name }}.sh"
  when: vm_name not in all_vms.list_vms
  loop: "{{ ocp4_nodes }}"
  delay: 10
  register: deploy_ocp4_nodes
  tags: [ deploy_nodes, rhcos, add_computes]

- name: build list of deployed vms
  vars:
    vm_name: "{{ item }}"
  set_fact:
    new_nodes: "{{ new_nodes + [ vm_name ] }}"
  when: vm_name not in all_vms.list_vms
  loop: "{{ ocp4_nodes }}"
  register: deploy_ocp4_nodes
  tags: [ deploy_nodes, rhcos, add_computes]

- name: show new nodes
  debug:
    msg: "{{ item }}"
  loop: "{{ new_nodes }}"
  tags: [ deploy_nodes, rhcos, add_computes]

- name: show ocp4_nodes
  debug:
    var: item
  loop: "{{ ocp4_nodes }}"
  tags: [ deploy_nodes, rhcos, add_computes]

- name: include wait_for_vm_shutdown.yml
  vars:
    vm_name: "{{ item }}"
    vm_hostname: "{{ item }}"
  include_tasks: wait_for_vm_shutdown.yml
  loop: "{{ new_nodes }}"
  tags: [ deploy_nodes, rhcos, rhcos_wait, add_computes ]

- name: ensure all nodes are started
  vars:
    vm_name: "{{ item }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ ocp4_nodes }}"
  delay: 10
  tags: [ deploy_nodes, bootstrap, add_computes]

- name: ensure kube folder exist
  file:
    path: "/home/{{ local_user_account  }}/.kube/"
    state: directory
    mode: '0755'
  become: true
  become_user: "{{ local_user_account }}"
  tags: [ postinstall, enable_shutdown ]

- name: setup kubeconfig
  copy:
    src: "{{ project_dir }}/{{ ocp4_okd4 }}/auth/kubeconfig"
    dest: "/home/{{ local_user_account }}/.kube/config"
    owner: "{{ local_user_account }}"
    group: "{{ local_user_account }}"
    backup: yes
  tags: [ postinstall, enable_shutdown ]

- name: Waiting for bootstrap Complete
  shell: |
    openshift-install --dir "{{ openshift_install_dir }}"  wait-for bootstrap-complete --log-level debug 2>&1 | tee "{{ bootstrap_log }}" &
  register: install_status
  until: "'Bootstrap status: complete' in install_status.stdout"
  retries: 220
  delay: 30
  tags: [ deploy_nodes, bootstrap, postinstall ]
  become: no

- name: "Install Status"
  debug:
    msg: "{{ install_status }}"
  register: continue_install
  tags: [ deploy_nodes, bootstrap, postinstall ]

- name: Waiting for Installation to Complete
  shell: |
    oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
    timeout 10 openshift-install --dir "{{ openshift_install_dir }}"  wait-for install-complete --log-level debug 2>&1 | tee -a {{ install_complete_log }}
  register: install_status
  until: "'Install complete!' in install_status.stdout"
  retries: 120
  delay: 30
  environment:
    KUBECONFIG: "{{ openshift_install_dir }}/auth/kubeconfig"
  become: no
  tags: [ complete_install ]

- name: import check_cluster.yml
  import_tasks: check_cluster.yml
  tags: [ complete_install, check_cluster_status ]

- name: include cluster verify tags from smoketest task
  include_tasks:
    file: smoketest.yml
    apply:
      tags:
        - smoketest-verify
  tags: verify-cluster
